// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package rest_test

import (
	"database/sql"
	"github.com/casbin/casbin/v2"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/wepala/weos/controllers/rest"
	weos "github.com/wepala/weos/model"
	"gorm.io/gorm"
	"net/http"
	"sync"
)

// Ensure, that ContainerMock does implement rest.Container.
// If this is not the case, regenerate this file with moq.
var _ rest.Container = &ContainerMock{}

// ContainerMock is a mock implementation of rest.Container.
//
// 	func TestSomethingThatUsesContainer(t *testing.T) {
//
// 		// make and configure a mocked rest.Container
// 		mockedContainer := &ContainerMock{
// 			GetCommandDispatcherFunc: func(name string) (weos.CommandDispatcher, error) {
// 				panic("mock out the GetCommandDispatcher method")
// 			},
// 			GetConfigFunc: func() *openapi3.Swagger {
// 				panic("mock out the GetConfig method")
// 			},
// 			GetControllerFunc: func(name string) (rest.Controller, error) {
// 				panic("mock out the GetController method")
// 			},
// 			GetDBConnectionFunc: func(name string) (*sql.DB, error) {
// 				panic("mock out the GetDBConnection method")
// 			},
// 			GetEntityFactoriesFunc: func() map[string]weos.EntityFactory {
// 				panic("mock out the GetEntityFactories method")
// 			},
// 			GetEntityFactoryFunc: func(name string) (weos.EntityFactory, error) {
// 				panic("mock out the GetEntityRepository method")
// 			},
// 			GetEntityRepositoryFunc: func(name string) (weos.EntityRepository, error) {
// 				panic("mock out the GetEntityRepository method")
// 			},
// 			GetEventStoreFunc: func(name string) (weos.EventRepository, error) {
// 				panic("mock out the GetEventStore method")
// 			},
// 			GetGlobalInitializersFunc: func() []rest.GlobalInitializer {
// 				panic("mock out the GetGlobalInitializers method")
// 			},
// 			GetGormDBConnectionFunc: func(name string) (*gorm.DB, error) {
// 				panic("mock out the GetGormDBConnection method")
// 			},
// 			GetHTTPClientFunc: func(name string) (*http.Client, error) {
// 				panic("mock out the GetHTTPClient method")
// 			},
// 			GetLogFunc: func(name string) (weos.Log, error) {
// 				panic("mock out the GetLog method")
// 			},
// 			GetMiddlewareFunc: func(name string) (rest.Middleware, error) {
// 				panic("mock out the GetMiddleware method")
// 			},
// 			GetOperationInitializersFunc: func() []rest.OperationInitializer {
// 				panic("mock out the GetOperationInitializers method")
// 			},
// 			GetPermissionEnforcerFunc: func(name string) (*casbin.Enforcer, error) {
// 				panic("mock out the GetPermissionEnforcer method")
// 			},
// 			GetPostPathInitializersFunc: func() []rest.PathInitializer {
// 				panic("mock out the GetPostPathInitializers method")
// 			},
// 			GetPrePathInitializersFunc: func() []rest.PathInitializer {
// 				panic("mock out the GetPrePathInitializers method")
// 			},
// 			GetProjectionFunc: func(name string) (weos.Projection, error) {
// 				panic("mock out the GetProjection method")
// 			},
// 			GetSecurityConfigurationFunc: func() *rest.SecurityConfiguration {
// 				panic("mock out the GetSecurityConfiguration method")
// 			},
// 			GetWeOSConfigFunc: func() *rest.APIConfig {
// 				panic("mock out the GetWeOSConfig method")
// 			},
// 			RegisterCommandDispatcherFunc: func(name string, dispatcher weos.CommandDispatcher)  {
// 				panic("mock out the RegisterCommandDispatcher method")
// 			},
// 			RegisterControllerFunc: func(name string, controller rest.Controller)  {
// 				panic("mock out the RegisterController method")
// 			},
// 			RegisterDBConnectionFunc: func(name string, connection *sql.DB)  {
// 				panic("mock out the RegisterDBConnection method")
// 			},
// 			RegisterEntityFactoryFunc: func(name string, factory weos.EntityFactory)  {
// 				panic("mock out the RegisterEntityFactory method")
// 			},
// 			RegisterEntityRepositoryFunc: func(name string, repository weos.EntityRepository)  {
// 				panic("mock out the RegisterEntityRepository method")
// 			},
// 			RegisterEventStoreFunc: func(name string, repository weos.EventRepository)  {
// 				panic("mock out the RegisterEventStore method")
// 			},
// 			RegisterGORMDBFunc: func(name string, connection *gorm.DB)  {
// 				panic("mock out the RegisterGORMDB method")
// 			},
// 			RegisterGlobalInitializerFunc: func(initializer rest.GlobalInitializer)  {
// 				panic("mock out the RegisterGlobalInitializer method")
// 			},
// 			RegisterHTTPClientFunc: func(name string, client *http.Client)  {
// 				panic("mock out the RegisterHTTPClient method")
// 			},
// 			RegisterLogFunc: func(name string, logger weos.Log)  {
// 				panic("mock out the RegisterLog method")
// 			},
// 			RegisterMiddlewareFunc: func(name string, middleware rest.Middleware)  {
// 				panic("mock out the RegisterMiddleware method")
// 			},
// 			RegisterOperationInitializerFunc: func(initializer rest.OperationInitializer)  {
// 				panic("mock out the RegisterOperationInitializer method")
// 			},
// 			RegisterPermissionEnforcerFunc: func(name string, enforcer *casbin.Enforcer)  {
// 				panic("mock out the RegisterPermissionEnforcer method")
// 			},
// 			RegisterPostPathInitializerFunc: func(initializer rest.PathInitializer)  {
// 				panic("mock out the RegisterPostPathInitializer method")
// 			},
// 			RegisterPrePathInitializerFunc: func(initializer rest.PathInitializer)  {
// 				panic("mock out the RegisterPrePathInitializer method")
// 			},
// 			RegisterProjectionFunc: func(name string, projection weos.Projection)  {
// 				panic("mock out the RegisterProjection method")
// 			},
// 			RegisterSecurityConfigurationFunc: func(configuration *rest.SecurityConfiguration)  {
// 				panic("mock out the RegisterSecurityConfiguration method")
// 			},
// 		}
//
// 		// use mockedContainer in code that requires rest.Container
// 		// and then make assertions.
//
// 	}
type ContainerMock struct {
	// GetCommandDispatcherFunc mocks the GetCommandDispatcher method.
	GetCommandDispatcherFunc func(name string) (weos.CommandDispatcher, error)

	// GetConfigFunc mocks the GetConfig method.
	GetConfigFunc func() *openapi3.Swagger

	// GetControllerFunc mocks the GetController method.
	GetControllerFunc func(name string) (rest.Controller, error)

	// GetDBConnectionFunc mocks the GetDBConnection method.
	GetDBConnectionFunc func(name string) (*sql.DB, error)

	// GetEntityFactoriesFunc mocks the GetEntityFactories method.
	GetEntityFactoriesFunc func() map[string]weos.EntityFactory

	// GetEntityFactoryFunc mocks the GetEntityRepository method.
	GetEntityFactoryFunc func(name string) (weos.EntityFactory, error)

	// GetEntityRepositoryFunc mocks the GetEntityRepository method.
	GetEntityRepositoryFunc func(name string) (weos.EntityRepository, error)

	// GetEventStoreFunc mocks the GetEventStore method.
	GetEventStoreFunc func(name string) (weos.EventRepository, error)

	// GetGlobalInitializersFunc mocks the GetGlobalInitializers method.
	GetGlobalInitializersFunc func() []rest.GlobalInitializer

	// GetGormDBConnectionFunc mocks the GetGormDBConnection method.
	GetGormDBConnectionFunc func(name string) (*gorm.DB, error)

	// GetHTTPClientFunc mocks the GetHTTPClient method.
	GetHTTPClientFunc func(name string) (*http.Client, error)

	// GetLogFunc mocks the GetLog method.
	GetLogFunc func(name string) (weos.Log, error)

	// GetMiddlewareFunc mocks the GetMiddleware method.
	GetMiddlewareFunc func(name string) (rest.Middleware, error)

	// GetOperationInitializersFunc mocks the GetOperationInitializers method.
	GetOperationInitializersFunc func() []rest.OperationInitializer

	// GetPermissionEnforcerFunc mocks the GetPermissionEnforcer method.
	GetPermissionEnforcerFunc func(name string) (*casbin.Enforcer, error)

	// GetPostPathInitializersFunc mocks the GetPostPathInitializers method.
	GetPostPathInitializersFunc func() []rest.PathInitializer

	// GetPrePathInitializersFunc mocks the GetPrePathInitializers method.
	GetPrePathInitializersFunc func() []rest.PathInitializer

	// GetProjectionFunc mocks the GetProjection method.
	GetProjectionFunc func(name string) (weos.Projection, error)

	// GetSecurityConfigurationFunc mocks the GetSecurityConfiguration method.
	GetSecurityConfigurationFunc func() *rest.SecurityConfiguration

	// GetWeOSConfigFunc mocks the GetWeOSConfig method.
	GetWeOSConfigFunc func() *rest.APIConfig

	// RegisterCommandDispatcherFunc mocks the RegisterCommandDispatcher method.
	RegisterCommandDispatcherFunc func(name string, dispatcher weos.CommandDispatcher)

	// RegisterControllerFunc mocks the RegisterController method.
	RegisterControllerFunc func(name string, controller rest.Controller)

	// RegisterDBConnectionFunc mocks the RegisterDBConnection method.
	RegisterDBConnectionFunc func(name string, connection *sql.DB)

	// RegisterEntityFactoryFunc mocks the RegisterEntityFactory method.
	RegisterEntityFactoryFunc func(name string, factory weos.EntityFactory)

	// RegisterEntityRepositoryFunc mocks the RegisterEntityRepository method.
	RegisterEntityRepositoryFunc func(name string, repository weos.EntityRepository)

	// RegisterEventStoreFunc mocks the RegisterEventStore method.
	RegisterEventStoreFunc func(name string, repository weos.EventRepository)

	// RegisterGORMDBFunc mocks the RegisterGORMDB method.
	RegisterGORMDBFunc func(name string, connection *gorm.DB)

	// RegisterGlobalInitializerFunc mocks the RegisterGlobalInitializer method.
	RegisterGlobalInitializerFunc func(initializer rest.GlobalInitializer)

	// RegisterHTTPClientFunc mocks the RegisterHTTPClient method.
	RegisterHTTPClientFunc func(name string, client *http.Client)

	// RegisterLogFunc mocks the RegisterLog method.
	RegisterLogFunc func(name string, logger weos.Log)

	// RegisterMiddlewareFunc mocks the RegisterMiddleware method.
	RegisterMiddlewareFunc func(name string, middleware rest.Middleware)

	// RegisterOperationInitializerFunc mocks the RegisterOperationInitializer method.
	RegisterOperationInitializerFunc func(initializer rest.OperationInitializer)

	// RegisterPermissionEnforcerFunc mocks the RegisterPermissionEnforcer method.
	RegisterPermissionEnforcerFunc func(name string, enforcer *casbin.Enforcer)

	// RegisterPostPathInitializerFunc mocks the RegisterPostPathInitializer method.
	RegisterPostPathInitializerFunc func(initializer rest.PathInitializer)

	// RegisterPrePathInitializerFunc mocks the RegisterPrePathInitializer method.
	RegisterPrePathInitializerFunc func(initializer rest.PathInitializer)

	// RegisterProjectionFunc mocks the RegisterProjection method.
	RegisterProjectionFunc func(name string, projection weos.Projection)

	// RegisterSecurityConfigurationFunc mocks the RegisterSecurityConfiguration method.
	RegisterSecurityConfigurationFunc func(configuration *rest.SecurityConfiguration)

	// calls tracks calls to the methods.
	calls struct {
		// GetCommandDispatcher holds details about calls to the GetCommandDispatcher method.
		GetCommandDispatcher []struct {
			// Name is the name argument value.
			Name string
		}
		// GetConfig holds details about calls to the GetConfig method.
		GetConfig []struct {
		}
		// GetController holds details about calls to the GetController method.
		GetController []struct {
			// Name is the name argument value.
			Name string
		}
		// GetDBConnection holds details about calls to the GetDBConnection method.
		GetDBConnection []struct {
			// Name is the name argument value.
			Name string
		}
		// GetEntityFactories holds details about calls to the GetEntityFactories method.
		GetEntityFactories []struct {
		}
		// GetEntityRepository holds details about calls to the GetEntityRepository method.
		GetEntityFactory []struct {
			// Name is the name argument value.
			Name string
		}
		// GetEntityRepository holds details about calls to the GetEntityRepository method.
		GetEntityRepository []struct {
			// Name is the name argument value.
			Name string
		}
		// GetEventStore holds details about calls to the GetEventStore method.
		GetEventStore []struct {
			// Name is the name argument value.
			Name string
		}
		// GetGlobalInitializers holds details about calls to the GetGlobalInitializers method.
		GetGlobalInitializers []struct {
		}
		// GetGormDBConnection holds details about calls to the GetGormDBConnection method.
		GetGormDBConnection []struct {
			// Name is the name argument value.
			Name string
		}
		// GetHTTPClient holds details about calls to the GetHTTPClient method.
		GetHTTPClient []struct {
			// Name is the name argument value.
			Name string
		}
		// GetLog holds details about calls to the GetLog method.
		GetLog []struct {
			// Name is the name argument value.
			Name string
		}
		// GetMiddleware holds details about calls to the GetMiddleware method.
		GetMiddleware []struct {
			// Name is the name argument value.
			Name string
		}
		// GetOperationInitializers holds details about calls to the GetOperationInitializers method.
		GetOperationInitializers []struct {
		}
		// GetPermissionEnforcer holds details about calls to the GetPermissionEnforcer method.
		GetPermissionEnforcer []struct {
			// Name is the name argument value.
			Name string
		}
		// GetPostPathInitializers holds details about calls to the GetPostPathInitializers method.
		GetPostPathInitializers []struct {
		}
		// GetPrePathInitializers holds details about calls to the GetPrePathInitializers method.
		GetPrePathInitializers []struct {
		}
		// GetProjection holds details about calls to the GetProjection method.
		GetProjection []struct {
			// Name is the name argument value.
			Name string
		}
		// GetSecurityConfiguration holds details about calls to the GetSecurityConfiguration method.
		GetSecurityConfiguration []struct {
		}
		// GetWeOSConfig holds details about calls to the GetWeOSConfig method.
		GetWeOSConfig []struct {
		}
		// RegisterCommandDispatcher holds details about calls to the RegisterCommandDispatcher method.
		RegisterCommandDispatcher []struct {
			// Name is the name argument value.
			Name string
			// Dispatcher is the dispatcher argument value.
			Dispatcher weos.CommandDispatcher
		}
		// RegisterController holds details about calls to the RegisterController method.
		RegisterController []struct {
			// Name is the name argument value.
			Name string
			// Controller is the controller argument value.
			Controller rest.Controller
		}
		// RegisterDBConnection holds details about calls to the RegisterDBConnection method.
		RegisterDBConnection []struct {
			// Name is the name argument value.
			Name string
			// Connection is the connection argument value.
			Connection *sql.DB
		}
		// RegisterEntityFactory holds details about calls to the RegisterEntityFactory method.
		RegisterEntityFactory []struct {
			// Name is the name argument value.
			Name string
			// Factory is the factory argument value.
			Factory weos.EntityFactory
		}
		// RegisterEntityRepository holds details about calls to the RegisterEntityRepository method.
		RegisterEntityRepository []struct {
			// Name is the name argument value.
			Name string
			// Repository is the repository argument value.
			Repository weos.EntityRepository
		}
		// RegisterEventStore holds details about calls to the RegisterEventStore method.
		RegisterEventStore []struct {
			// Name is the name argument value.
			Name string
			// Repository is the repository argument value.
			Repository weos.EventRepository
		}
		// RegisterGORMDB holds details about calls to the RegisterGORMDB method.
		RegisterGORMDB []struct {
			// Name is the name argument value.
			Name string
			// Connection is the connection argument value.
			Connection *gorm.DB
		}
		// RegisterGlobalInitializer holds details about calls to the RegisterGlobalInitializer method.
		RegisterGlobalInitializer []struct {
			// Initializer is the initializer argument value.
			Initializer rest.GlobalInitializer
		}
		// RegisterHTTPClient holds details about calls to the RegisterHTTPClient method.
		RegisterHTTPClient []struct {
			// Name is the name argument value.
			Name string
			// Client is the client argument value.
			Client *http.Client
		}
		// RegisterLog holds details about calls to the RegisterLog method.
		RegisterLog []struct {
			// Name is the name argument value.
			Name string
			// Logger is the logger argument value.
			Logger weos.Log
		}
		// RegisterMiddleware holds details about calls to the RegisterMiddleware method.
		RegisterMiddleware []struct {
			// Name is the name argument value.
			Name string
			// Middleware is the middleware argument value.
			Middleware rest.Middleware
		}
		// RegisterOperationInitializer holds details about calls to the RegisterOperationInitializer method.
		RegisterOperationInitializer []struct {
			// Initializer is the initializer argument value.
			Initializer rest.OperationInitializer
		}
		// RegisterPermissionEnforcer holds details about calls to the RegisterPermissionEnforcer method.
		RegisterPermissionEnforcer []struct {
			// Name is the name argument value.
			Name string
			// Enforcer is the enforcer argument value.
			Enforcer *casbin.Enforcer
		}
		// RegisterPostPathInitializer holds details about calls to the RegisterPostPathInitializer method.
		RegisterPostPathInitializer []struct {
			// Initializer is the initializer argument value.
			Initializer rest.PathInitializer
		}
		// RegisterPrePathInitializer holds details about calls to the RegisterPrePathInitializer method.
		RegisterPrePathInitializer []struct {
			// Initializer is the initializer argument value.
			Initializer rest.PathInitializer
		}
		// RegisterProjection holds details about calls to the RegisterProjection method.
		RegisterProjection []struct {
			// Name is the name argument value.
			Name string
			// Projection is the projection argument value.
			Projection weos.Projection
		}
		// RegisterSecurityConfiguration holds details about calls to the RegisterSecurityConfiguration method.
		RegisterSecurityConfiguration []struct {
			// Configuration is the configuration argument value.
			Configuration *rest.SecurityConfiguration
		}
	}
	lockGetCommandDispatcher          sync.RWMutex
	lockGetConfig                     sync.RWMutex
	lockGetController                 sync.RWMutex
	lockGetDBConnection               sync.RWMutex
	lockGetEntityFactories            sync.RWMutex
	lockGetEntityFactory              sync.RWMutex
	lockGetEntityRepository           sync.RWMutex
	lockGetEventStore                 sync.RWMutex
	lockGetGlobalInitializers         sync.RWMutex
	lockGetGormDBConnection           sync.RWMutex
	lockGetHTTPClient                 sync.RWMutex
	lockGetLog                        sync.RWMutex
	lockGetMiddleware                 sync.RWMutex
	lockGetOperationInitializers      sync.RWMutex
	lockGetPermissionEnforcer         sync.RWMutex
	lockGetPostPathInitializers       sync.RWMutex
	lockGetPrePathInitializers        sync.RWMutex
	lockGetProjection                 sync.RWMutex
	lockGetSecurityConfiguration      sync.RWMutex
	lockGetWeOSConfig                 sync.RWMutex
	lockRegisterCommandDispatcher     sync.RWMutex
	lockRegisterController            sync.RWMutex
	lockRegisterDBConnection          sync.RWMutex
	lockRegisterEntityFactory         sync.RWMutex
	lockRegisterEntityRepository      sync.RWMutex
	lockRegisterEventStore            sync.RWMutex
	lockRegisterGORMDB                sync.RWMutex
	lockRegisterGlobalInitializer     sync.RWMutex
	lockRegisterHTTPClient            sync.RWMutex
	lockRegisterLog                   sync.RWMutex
	lockRegisterMiddleware            sync.RWMutex
	lockRegisterOperationInitializer  sync.RWMutex
	lockRegisterPermissionEnforcer    sync.RWMutex
	lockRegisterPostPathInitializer   sync.RWMutex
	lockRegisterPrePathInitializer    sync.RWMutex
	lockRegisterProjection            sync.RWMutex
	lockRegisterSecurityConfiguration sync.RWMutex
}

// GetCommandDispatcher calls GetCommandDispatcherFunc.
func (mock *ContainerMock) GetCommandDispatcher(name string) (weos.CommandDispatcher, error) {
	if mock.GetCommandDispatcherFunc == nil {
		panic("ContainerMock.GetCommandDispatcherFunc: method is nil but Container.GetCommandDispatcher was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockGetCommandDispatcher.Lock()
	mock.calls.GetCommandDispatcher = append(mock.calls.GetCommandDispatcher, callInfo)
	mock.lockGetCommandDispatcher.Unlock()
	return mock.GetCommandDispatcherFunc(name)
}

// GetCommandDispatcherCalls gets all the calls that were made to GetCommandDispatcher.
// Check the length with:
//     len(mockedContainer.GetCommandDispatcherCalls())
func (mock *ContainerMock) GetCommandDispatcherCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockGetCommandDispatcher.RLock()
	calls = mock.calls.GetCommandDispatcher
	mock.lockGetCommandDispatcher.RUnlock()
	return calls
}

// GetConfig calls GetConfigFunc.
func (mock *ContainerMock) GetConfig() *openapi3.Swagger {
	if mock.GetConfigFunc == nil {
		panic("ContainerMock.GetConfigFunc: method is nil but Container.GetConfig was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetConfig.Lock()
	mock.calls.GetConfig = append(mock.calls.GetConfig, callInfo)
	mock.lockGetConfig.Unlock()
	return mock.GetConfigFunc()
}

// GetConfigCalls gets all the calls that were made to GetConfig.
// Check the length with:
//     len(mockedContainer.GetConfigCalls())
func (mock *ContainerMock) GetConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetConfig.RLock()
	calls = mock.calls.GetConfig
	mock.lockGetConfig.RUnlock()
	return calls
}

// GetController calls GetControllerFunc.
func (mock *ContainerMock) GetController(name string) (rest.Controller, error) {
	if mock.GetControllerFunc == nil {
		panic("ContainerMock.GetControllerFunc: method is nil but Container.GetController was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockGetController.Lock()
	mock.calls.GetController = append(mock.calls.GetController, callInfo)
	mock.lockGetController.Unlock()
	return mock.GetControllerFunc(name)
}

// GetControllerCalls gets all the calls that were made to GetController.
// Check the length with:
//     len(mockedContainer.GetControllerCalls())
func (mock *ContainerMock) GetControllerCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockGetController.RLock()
	calls = mock.calls.GetController
	mock.lockGetController.RUnlock()
	return calls
}

// GetDBConnection calls GetDBConnectionFunc.
func (mock *ContainerMock) GetDBConnection(name string) (*sql.DB, error) {
	if mock.GetDBConnectionFunc == nil {
		panic("ContainerMock.GetDBConnectionFunc: method is nil but Container.GetDBConnection was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockGetDBConnection.Lock()
	mock.calls.GetDBConnection = append(mock.calls.GetDBConnection, callInfo)
	mock.lockGetDBConnection.Unlock()
	return mock.GetDBConnectionFunc(name)
}

// GetDBConnectionCalls gets all the calls that were made to GetDBConnection.
// Check the length with:
//     len(mockedContainer.GetDBConnectionCalls())
func (mock *ContainerMock) GetDBConnectionCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockGetDBConnection.RLock()
	calls = mock.calls.GetDBConnection
	mock.lockGetDBConnection.RUnlock()
	return calls
}

// GetEntityFactories calls GetEntityFactoriesFunc.
func (mock *ContainerMock) GetEntityFactories() map[string]weos.EntityFactory {
	if mock.GetEntityFactoriesFunc == nil {
		panic("ContainerMock.GetEntityFactoriesFunc: method is nil but Container.GetEntityFactories was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetEntityFactories.Lock()
	mock.calls.GetEntityFactories = append(mock.calls.GetEntityFactories, callInfo)
	mock.lockGetEntityFactories.Unlock()
	return mock.GetEntityFactoriesFunc()
}

// GetEntityFactoriesCalls gets all the calls that were made to GetEntityFactories.
// Check the length with:
//     len(mockedContainer.GetEntityFactoriesCalls())
func (mock *ContainerMock) GetEntityFactoriesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetEntityFactories.RLock()
	calls = mock.calls.GetEntityFactories
	mock.lockGetEntityFactories.RUnlock()
	return calls
}

// GetEntityRepository calls GetEntityFactoryFunc.
func (mock *ContainerMock) GetEntityFactory(name string) (weos.EntityFactory, error) {
	if mock.GetEntityFactoryFunc == nil {
		panic("ContainerMock.GetEntityFactoryFunc: method is nil but Container.GetEntityRepository was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockGetEntityFactory.Lock()
	mock.calls.GetEntityFactory = append(mock.calls.GetEntityFactory, callInfo)
	mock.lockGetEntityFactory.Unlock()
	return mock.GetEntityFactoryFunc(name)
}

// GetEntityFactoryCalls gets all the calls that were made to GetEntityRepository.
// Check the length with:
//     len(mockedContainer.GetEntityFactoryCalls())
func (mock *ContainerMock) GetEntityFactoryCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockGetEntityFactory.RLock()
	calls = mock.calls.GetEntityFactory
	mock.lockGetEntityFactory.RUnlock()
	return calls
}

// GetEntityRepository calls GetEntityRepositoryFunc.
func (mock *ContainerMock) GetEntityRepository(name string) (weos.EntityRepository, error) {
	if mock.GetEntityRepositoryFunc == nil {
		panic("ContainerMock.GetEntityRepositoryFunc: method is nil but Container.GetEntityRepository was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockGetEntityRepository.Lock()
	mock.calls.GetEntityRepository = append(mock.calls.GetEntityRepository, callInfo)
	mock.lockGetEntityRepository.Unlock()
	return mock.GetEntityRepositoryFunc(name)
}

// GetEntityRepositoryCalls gets all the calls that were made to GetEntityRepository.
// Check the length with:
//     len(mockedContainer.GetEntityRepositoryCalls())
func (mock *ContainerMock) GetEntityRepositoryCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockGetEntityRepository.RLock()
	calls = mock.calls.GetEntityRepository
	mock.lockGetEntityRepository.RUnlock()
	return calls
}

// GetEventStore calls GetEventStoreFunc.
func (mock *ContainerMock) GetEventStore(name string) (weos.EventRepository, error) {
	if mock.GetEventStoreFunc == nil {
		panic("ContainerMock.GetEventStoreFunc: method is nil but Container.GetEventStore was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockGetEventStore.Lock()
	mock.calls.GetEventStore = append(mock.calls.GetEventStore, callInfo)
	mock.lockGetEventStore.Unlock()
	return mock.GetEventStoreFunc(name)
}

// GetEventStoreCalls gets all the calls that were made to GetEventStore.
// Check the length with:
//     len(mockedContainer.GetEventStoreCalls())
func (mock *ContainerMock) GetEventStoreCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockGetEventStore.RLock()
	calls = mock.calls.GetEventStore
	mock.lockGetEventStore.RUnlock()
	return calls
}

// GetGlobalInitializers calls GetGlobalInitializersFunc.
func (mock *ContainerMock) GetGlobalInitializers() []rest.GlobalInitializer {
	if mock.GetGlobalInitializersFunc == nil {
		panic("ContainerMock.GetGlobalInitializersFunc: method is nil but Container.GetGlobalInitializers was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetGlobalInitializers.Lock()
	mock.calls.GetGlobalInitializers = append(mock.calls.GetGlobalInitializers, callInfo)
	mock.lockGetGlobalInitializers.Unlock()
	return mock.GetGlobalInitializersFunc()
}

// GetGlobalInitializersCalls gets all the calls that were made to GetGlobalInitializers.
// Check the length with:
//     len(mockedContainer.GetGlobalInitializersCalls())
func (mock *ContainerMock) GetGlobalInitializersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetGlobalInitializers.RLock()
	calls = mock.calls.GetGlobalInitializers
	mock.lockGetGlobalInitializers.RUnlock()
	return calls
}

// GetGormDBConnection calls GetGormDBConnectionFunc.
func (mock *ContainerMock) GetGormDBConnection(name string) (*gorm.DB, error) {
	if mock.GetGormDBConnectionFunc == nil {
		panic("ContainerMock.GetGormDBConnectionFunc: method is nil but Container.GetGormDBConnection was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockGetGormDBConnection.Lock()
	mock.calls.GetGormDBConnection = append(mock.calls.GetGormDBConnection, callInfo)
	mock.lockGetGormDBConnection.Unlock()
	return mock.GetGormDBConnectionFunc(name)
}

// GetGormDBConnectionCalls gets all the calls that were made to GetGormDBConnection.
// Check the length with:
//     len(mockedContainer.GetGormDBConnectionCalls())
func (mock *ContainerMock) GetGormDBConnectionCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockGetGormDBConnection.RLock()
	calls = mock.calls.GetGormDBConnection
	mock.lockGetGormDBConnection.RUnlock()
	return calls
}

// GetHTTPClient calls GetHTTPClientFunc.
func (mock *ContainerMock) GetHTTPClient(name string) (*http.Client, error) {
	if mock.GetHTTPClientFunc == nil {
		panic("ContainerMock.GetHTTPClientFunc: method is nil but Container.GetHTTPClient was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockGetHTTPClient.Lock()
	mock.calls.GetHTTPClient = append(mock.calls.GetHTTPClient, callInfo)
	mock.lockGetHTTPClient.Unlock()
	return mock.GetHTTPClientFunc(name)
}

// GetHTTPClientCalls gets all the calls that were made to GetHTTPClient.
// Check the length with:
//     len(mockedContainer.GetHTTPClientCalls())
func (mock *ContainerMock) GetHTTPClientCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockGetHTTPClient.RLock()
	calls = mock.calls.GetHTTPClient
	mock.lockGetHTTPClient.RUnlock()
	return calls
}

// GetLog calls GetLogFunc.
func (mock *ContainerMock) GetLog(name string) (weos.Log, error) {
	if mock.GetLogFunc == nil {
		panic("ContainerMock.GetLogFunc: method is nil but Container.GetLog was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockGetLog.Lock()
	mock.calls.GetLog = append(mock.calls.GetLog, callInfo)
	mock.lockGetLog.Unlock()
	return mock.GetLogFunc(name)
}

// GetLogCalls gets all the calls that were made to GetLog.
// Check the length with:
//     len(mockedContainer.GetLogCalls())
func (mock *ContainerMock) GetLogCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockGetLog.RLock()
	calls = mock.calls.GetLog
	mock.lockGetLog.RUnlock()
	return calls
}

// GetMiddleware calls GetMiddlewareFunc.
func (mock *ContainerMock) GetMiddleware(name string) (rest.Middleware, error) {
	if mock.GetMiddlewareFunc == nil {
		panic("ContainerMock.GetMiddlewareFunc: method is nil but Container.GetMiddleware was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockGetMiddleware.Lock()
	mock.calls.GetMiddleware = append(mock.calls.GetMiddleware, callInfo)
	mock.lockGetMiddleware.Unlock()
	return mock.GetMiddlewareFunc(name)
}

// GetMiddlewareCalls gets all the calls that were made to GetMiddleware.
// Check the length with:
//     len(mockedContainer.GetMiddlewareCalls())
func (mock *ContainerMock) GetMiddlewareCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockGetMiddleware.RLock()
	calls = mock.calls.GetMiddleware
	mock.lockGetMiddleware.RUnlock()
	return calls
}

// GetOperationInitializers calls GetOperationInitializersFunc.
func (mock *ContainerMock) GetOperationInitializers() []rest.OperationInitializer {
	if mock.GetOperationInitializersFunc == nil {
		panic("ContainerMock.GetOperationInitializersFunc: method is nil but Container.GetOperationInitializers was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetOperationInitializers.Lock()
	mock.calls.GetOperationInitializers = append(mock.calls.GetOperationInitializers, callInfo)
	mock.lockGetOperationInitializers.Unlock()
	return mock.GetOperationInitializersFunc()
}

// GetOperationInitializersCalls gets all the calls that were made to GetOperationInitializers.
// Check the length with:
//     len(mockedContainer.GetOperationInitializersCalls())
func (mock *ContainerMock) GetOperationInitializersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetOperationInitializers.RLock()
	calls = mock.calls.GetOperationInitializers
	mock.lockGetOperationInitializers.RUnlock()
	return calls
}

// GetPermissionEnforcer calls GetPermissionEnforcerFunc.
func (mock *ContainerMock) GetPermissionEnforcer(name string) (*casbin.Enforcer, error) {
	if mock.GetPermissionEnforcerFunc == nil {
		panic("ContainerMock.GetPermissionEnforcerFunc: method is nil but Container.GetPermissionEnforcer was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockGetPermissionEnforcer.Lock()
	mock.calls.GetPermissionEnforcer = append(mock.calls.GetPermissionEnforcer, callInfo)
	mock.lockGetPermissionEnforcer.Unlock()
	return mock.GetPermissionEnforcerFunc(name)
}

// GetPermissionEnforcerCalls gets all the calls that were made to GetPermissionEnforcer.
// Check the length with:
//     len(mockedContainer.GetPermissionEnforcerCalls())
func (mock *ContainerMock) GetPermissionEnforcerCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockGetPermissionEnforcer.RLock()
	calls = mock.calls.GetPermissionEnforcer
	mock.lockGetPermissionEnforcer.RUnlock()
	return calls
}

// GetPostPathInitializers calls GetPostPathInitializersFunc.
func (mock *ContainerMock) GetPostPathInitializers() []rest.PathInitializer {
	if mock.GetPostPathInitializersFunc == nil {
		panic("ContainerMock.GetPostPathInitializersFunc: method is nil but Container.GetPostPathInitializers was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetPostPathInitializers.Lock()
	mock.calls.GetPostPathInitializers = append(mock.calls.GetPostPathInitializers, callInfo)
	mock.lockGetPostPathInitializers.Unlock()
	return mock.GetPostPathInitializersFunc()
}

// GetPostPathInitializersCalls gets all the calls that were made to GetPostPathInitializers.
// Check the length with:
//     len(mockedContainer.GetPostPathInitializersCalls())
func (mock *ContainerMock) GetPostPathInitializersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetPostPathInitializers.RLock()
	calls = mock.calls.GetPostPathInitializers
	mock.lockGetPostPathInitializers.RUnlock()
	return calls
}

// GetPrePathInitializers calls GetPrePathInitializersFunc.
func (mock *ContainerMock) GetPrePathInitializers() []rest.PathInitializer {
	if mock.GetPrePathInitializersFunc == nil {
		panic("ContainerMock.GetPrePathInitializersFunc: method is nil but Container.GetPrePathInitializers was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetPrePathInitializers.Lock()
	mock.calls.GetPrePathInitializers = append(mock.calls.GetPrePathInitializers, callInfo)
	mock.lockGetPrePathInitializers.Unlock()
	return mock.GetPrePathInitializersFunc()
}

// GetPrePathInitializersCalls gets all the calls that were made to GetPrePathInitializers.
// Check the length with:
//     len(mockedContainer.GetPrePathInitializersCalls())
func (mock *ContainerMock) GetPrePathInitializersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetPrePathInitializers.RLock()
	calls = mock.calls.GetPrePathInitializers
	mock.lockGetPrePathInitializers.RUnlock()
	return calls
}

// GetProjection calls GetProjectionFunc.
func (mock *ContainerMock) GetProjection(name string) (weos.Projection, error) {
	if mock.GetProjectionFunc == nil {
		panic("ContainerMock.GetProjectionFunc: method is nil but Container.GetProjection was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockGetProjection.Lock()
	mock.calls.GetProjection = append(mock.calls.GetProjection, callInfo)
	mock.lockGetProjection.Unlock()
	return mock.GetProjectionFunc(name)
}

// GetProjectionCalls gets all the calls that were made to GetProjection.
// Check the length with:
//     len(mockedContainer.GetProjectionCalls())
func (mock *ContainerMock) GetProjectionCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockGetProjection.RLock()
	calls = mock.calls.GetProjection
	mock.lockGetProjection.RUnlock()
	return calls
}

// GetSecurityConfiguration calls GetSecurityConfigurationFunc.
func (mock *ContainerMock) GetSecurityConfiguration() *rest.SecurityConfiguration {
	if mock.GetSecurityConfigurationFunc == nil {
		panic("ContainerMock.GetSecurityConfigurationFunc: method is nil but Container.GetSecurityConfiguration was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetSecurityConfiguration.Lock()
	mock.calls.GetSecurityConfiguration = append(mock.calls.GetSecurityConfiguration, callInfo)
	mock.lockGetSecurityConfiguration.Unlock()
	return mock.GetSecurityConfigurationFunc()
}

// GetSecurityConfigurationCalls gets all the calls that were made to GetSecurityConfiguration.
// Check the length with:
//     len(mockedContainer.GetSecurityConfigurationCalls())
func (mock *ContainerMock) GetSecurityConfigurationCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetSecurityConfiguration.RLock()
	calls = mock.calls.GetSecurityConfiguration
	mock.lockGetSecurityConfiguration.RUnlock()
	return calls
}

// GetWeOSConfig calls GetWeOSConfigFunc.
func (mock *ContainerMock) GetWeOSConfig() *rest.APIConfig {
	if mock.GetWeOSConfigFunc == nil {
		panic("ContainerMock.GetWeOSConfigFunc: method is nil but Container.GetWeOSConfig was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetWeOSConfig.Lock()
	mock.calls.GetWeOSConfig = append(mock.calls.GetWeOSConfig, callInfo)
	mock.lockGetWeOSConfig.Unlock()
	return mock.GetWeOSConfigFunc()
}

// GetWeOSConfigCalls gets all the calls that were made to GetWeOSConfig.
// Check the length with:
//     len(mockedContainer.GetWeOSConfigCalls())
func (mock *ContainerMock) GetWeOSConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetWeOSConfig.RLock()
	calls = mock.calls.GetWeOSConfig
	mock.lockGetWeOSConfig.RUnlock()
	return calls
}

// RegisterCommandDispatcher calls RegisterCommandDispatcherFunc.
func (mock *ContainerMock) RegisterCommandDispatcher(name string, dispatcher weos.CommandDispatcher) {
	if mock.RegisterCommandDispatcherFunc == nil {
		panic("ContainerMock.RegisterCommandDispatcherFunc: method is nil but Container.RegisterCommandDispatcher was just called")
	}
	callInfo := struct {
		Name       string
		Dispatcher weos.CommandDispatcher
	}{
		Name:       name,
		Dispatcher: dispatcher,
	}
	mock.lockRegisterCommandDispatcher.Lock()
	mock.calls.RegisterCommandDispatcher = append(mock.calls.RegisterCommandDispatcher, callInfo)
	mock.lockRegisterCommandDispatcher.Unlock()
	mock.RegisterCommandDispatcherFunc(name, dispatcher)
}

// RegisterCommandDispatcherCalls gets all the calls that were made to RegisterCommandDispatcher.
// Check the length with:
//     len(mockedContainer.RegisterCommandDispatcherCalls())
func (mock *ContainerMock) RegisterCommandDispatcherCalls() []struct {
	Name       string
	Dispatcher weos.CommandDispatcher
} {
	var calls []struct {
		Name       string
		Dispatcher weos.CommandDispatcher
	}
	mock.lockRegisterCommandDispatcher.RLock()
	calls = mock.calls.RegisterCommandDispatcher
	mock.lockRegisterCommandDispatcher.RUnlock()
	return calls
}

// RegisterController calls RegisterControllerFunc.
func (mock *ContainerMock) RegisterController(name string, controller rest.Controller) {
	if mock.RegisterControllerFunc == nil {
		panic("ContainerMock.RegisterControllerFunc: method is nil but Container.RegisterController was just called")
	}
	callInfo := struct {
		Name       string
		Controller rest.Controller
	}{
		Name:       name,
		Controller: controller,
	}
	mock.lockRegisterController.Lock()
	mock.calls.RegisterController = append(mock.calls.RegisterController, callInfo)
	mock.lockRegisterController.Unlock()
	mock.RegisterControllerFunc(name, controller)
}

// RegisterControllerCalls gets all the calls that were made to RegisterController.
// Check the length with:
//     len(mockedContainer.RegisterControllerCalls())
func (mock *ContainerMock) RegisterControllerCalls() []struct {
	Name       string
	Controller rest.Controller
} {
	var calls []struct {
		Name       string
		Controller rest.Controller
	}
	mock.lockRegisterController.RLock()
	calls = mock.calls.RegisterController
	mock.lockRegisterController.RUnlock()
	return calls
}

// RegisterDBConnection calls RegisterDBConnectionFunc.
func (mock *ContainerMock) RegisterDBConnection(name string, connection *sql.DB) {
	if mock.RegisterDBConnectionFunc == nil {
		panic("ContainerMock.RegisterDBConnectionFunc: method is nil but Container.RegisterDBConnection was just called")
	}
	callInfo := struct {
		Name       string
		Connection *sql.DB
	}{
		Name:       name,
		Connection: connection,
	}
	mock.lockRegisterDBConnection.Lock()
	mock.calls.RegisterDBConnection = append(mock.calls.RegisterDBConnection, callInfo)
	mock.lockRegisterDBConnection.Unlock()
	mock.RegisterDBConnectionFunc(name, connection)
}

// RegisterDBConnectionCalls gets all the calls that were made to RegisterDBConnection.
// Check the length with:
//     len(mockedContainer.RegisterDBConnectionCalls())
func (mock *ContainerMock) RegisterDBConnectionCalls() []struct {
	Name       string
	Connection *sql.DB
} {
	var calls []struct {
		Name       string
		Connection *sql.DB
	}
	mock.lockRegisterDBConnection.RLock()
	calls = mock.calls.RegisterDBConnection
	mock.lockRegisterDBConnection.RUnlock()
	return calls
}

// RegisterEntityFactory calls RegisterEntityFactoryFunc.
func (mock *ContainerMock) RegisterEntityFactory(name string, factory weos.EntityFactory) {
	if mock.RegisterEntityFactoryFunc == nil {
		panic("ContainerMock.RegisterEntityFactoryFunc: method is nil but Container.RegisterEntityFactory was just called")
	}
	callInfo := struct {
		Name    string
		Factory weos.EntityFactory
	}{
		Name:    name,
		Factory: factory,
	}
	mock.lockRegisterEntityFactory.Lock()
	mock.calls.RegisterEntityFactory = append(mock.calls.RegisterEntityFactory, callInfo)
	mock.lockRegisterEntityFactory.Unlock()
	mock.RegisterEntityFactoryFunc(name, factory)
}

// RegisterEntityFactoryCalls gets all the calls that were made to RegisterEntityFactory.
// Check the length with:
//     len(mockedContainer.RegisterEntityFactoryCalls())
func (mock *ContainerMock) RegisterEntityFactoryCalls() []struct {
	Name    string
	Factory weos.EntityFactory
} {
	var calls []struct {
		Name    string
		Factory weos.EntityFactory
	}
	mock.lockRegisterEntityFactory.RLock()
	calls = mock.calls.RegisterEntityFactory
	mock.lockRegisterEntityFactory.RUnlock()
	return calls
}

// RegisterEntityRepository calls RegisterEntityRepositoryFunc.
func (mock *ContainerMock) RegisterEntityRepository(name string, repository weos.EntityRepository) {
	if mock.RegisterEntityRepositoryFunc == nil {
		panic("ContainerMock.RegisterEntityRepositoryFunc: method is nil but Container.RegisterEntityRepository was just called")
	}
	callInfo := struct {
		Name       string
		Repository weos.EntityRepository
	}{
		Name:       name,
		Repository: repository,
	}
	mock.lockRegisterEntityRepository.Lock()
	mock.calls.RegisterEntityRepository = append(mock.calls.RegisterEntityRepository, callInfo)
	mock.lockRegisterEntityRepository.Unlock()
	mock.RegisterEntityRepositoryFunc(name, repository)
}

// RegisterEntityRepositoryCalls gets all the calls that were made to RegisterEntityRepository.
// Check the length with:
//     len(mockedContainer.RegisterEntityRepositoryCalls())
func (mock *ContainerMock) RegisterEntityRepositoryCalls() []struct {
	Name       string
	Repository weos.EntityRepository
} {
	var calls []struct {
		Name       string
		Repository weos.EntityRepository
	}
	mock.lockRegisterEntityRepository.RLock()
	calls = mock.calls.RegisterEntityRepository
	mock.lockRegisterEntityRepository.RUnlock()
	return calls
}

// RegisterEventStore calls RegisterEventStoreFunc.
func (mock *ContainerMock) RegisterEventStore(name string, repository weos.EventRepository) {
	if mock.RegisterEventStoreFunc == nil {
		panic("ContainerMock.RegisterEventStoreFunc: method is nil but Container.RegisterEventStore was just called")
	}
	callInfo := struct {
		Name       string
		Repository weos.EventRepository
	}{
		Name:       name,
		Repository: repository,
	}
	mock.lockRegisterEventStore.Lock()
	mock.calls.RegisterEventStore = append(mock.calls.RegisterEventStore, callInfo)
	mock.lockRegisterEventStore.Unlock()
	mock.RegisterEventStoreFunc(name, repository)
}

// RegisterEventStoreCalls gets all the calls that were made to RegisterEventStore.
// Check the length with:
//     len(mockedContainer.RegisterEventStoreCalls())
func (mock *ContainerMock) RegisterEventStoreCalls() []struct {
	Name       string
	Repository weos.EventRepository
} {
	var calls []struct {
		Name       string
		Repository weos.EventRepository
	}
	mock.lockRegisterEventStore.RLock()
	calls = mock.calls.RegisterEventStore
	mock.lockRegisterEventStore.RUnlock()
	return calls
}

// RegisterGORMDB calls RegisterGORMDBFunc.
func (mock *ContainerMock) RegisterGORMDB(name string, connection *gorm.DB) {
	if mock.RegisterGORMDBFunc == nil {
		panic("ContainerMock.RegisterGORMDBFunc: method is nil but Container.RegisterGORMDB was just called")
	}
	callInfo := struct {
		Name       string
		Connection *gorm.DB
	}{
		Name:       name,
		Connection: connection,
	}
	mock.lockRegisterGORMDB.Lock()
	mock.calls.RegisterGORMDB = append(mock.calls.RegisterGORMDB, callInfo)
	mock.lockRegisterGORMDB.Unlock()
	mock.RegisterGORMDBFunc(name, connection)
}

// RegisterGORMDBCalls gets all the calls that were made to RegisterGORMDB.
// Check the length with:
//     len(mockedContainer.RegisterGORMDBCalls())
func (mock *ContainerMock) RegisterGORMDBCalls() []struct {
	Name       string
	Connection *gorm.DB
} {
	var calls []struct {
		Name       string
		Connection *gorm.DB
	}
	mock.lockRegisterGORMDB.RLock()
	calls = mock.calls.RegisterGORMDB
	mock.lockRegisterGORMDB.RUnlock()
	return calls
}

// RegisterGlobalInitializer calls RegisterGlobalInitializerFunc.
func (mock *ContainerMock) RegisterGlobalInitializer(initializer rest.GlobalInitializer) {
	if mock.RegisterGlobalInitializerFunc == nil {
		panic("ContainerMock.RegisterGlobalInitializerFunc: method is nil but Container.RegisterGlobalInitializer was just called")
	}
	callInfo := struct {
		Initializer rest.GlobalInitializer
	}{
		Initializer: initializer,
	}
	mock.lockRegisterGlobalInitializer.Lock()
	mock.calls.RegisterGlobalInitializer = append(mock.calls.RegisterGlobalInitializer, callInfo)
	mock.lockRegisterGlobalInitializer.Unlock()
	mock.RegisterGlobalInitializerFunc(initializer)
}

// RegisterGlobalInitializerCalls gets all the calls that were made to RegisterGlobalInitializer.
// Check the length with:
//     len(mockedContainer.RegisterGlobalInitializerCalls())
func (mock *ContainerMock) RegisterGlobalInitializerCalls() []struct {
	Initializer rest.GlobalInitializer
} {
	var calls []struct {
		Initializer rest.GlobalInitializer
	}
	mock.lockRegisterGlobalInitializer.RLock()
	calls = mock.calls.RegisterGlobalInitializer
	mock.lockRegisterGlobalInitializer.RUnlock()
	return calls
}

// RegisterHTTPClient calls RegisterHTTPClientFunc.
func (mock *ContainerMock) RegisterHTTPClient(name string, client *http.Client) {
	if mock.RegisterHTTPClientFunc == nil {
		panic("ContainerMock.RegisterHTTPClientFunc: method is nil but Container.RegisterHTTPClient was just called")
	}
	callInfo := struct {
		Name   string
		Client *http.Client
	}{
		Name:   name,
		Client: client,
	}
	mock.lockRegisterHTTPClient.Lock()
	mock.calls.RegisterHTTPClient = append(mock.calls.RegisterHTTPClient, callInfo)
	mock.lockRegisterHTTPClient.Unlock()
	mock.RegisterHTTPClientFunc(name, client)
}

// RegisterHTTPClientCalls gets all the calls that were made to RegisterHTTPClient.
// Check the length with:
//     len(mockedContainer.RegisterHTTPClientCalls())
func (mock *ContainerMock) RegisterHTTPClientCalls() []struct {
	Name   string
	Client *http.Client
} {
	var calls []struct {
		Name   string
		Client *http.Client
	}
	mock.lockRegisterHTTPClient.RLock()
	calls = mock.calls.RegisterHTTPClient
	mock.lockRegisterHTTPClient.RUnlock()
	return calls
}

// RegisterLog calls RegisterLogFunc.
func (mock *ContainerMock) RegisterLog(name string, logger weos.Log) {
	if mock.RegisterLogFunc == nil {
		panic("ContainerMock.RegisterLogFunc: method is nil but Container.RegisterLog was just called")
	}
	callInfo := struct {
		Name   string
		Logger weos.Log
	}{
		Name:   name,
		Logger: logger,
	}
	mock.lockRegisterLog.Lock()
	mock.calls.RegisterLog = append(mock.calls.RegisterLog, callInfo)
	mock.lockRegisterLog.Unlock()
	mock.RegisterLogFunc(name, logger)
}

// RegisterLogCalls gets all the calls that were made to RegisterLog.
// Check the length with:
//     len(mockedContainer.RegisterLogCalls())
func (mock *ContainerMock) RegisterLogCalls() []struct {
	Name   string
	Logger weos.Log
} {
	var calls []struct {
		Name   string
		Logger weos.Log
	}
	mock.lockRegisterLog.RLock()
	calls = mock.calls.RegisterLog
	mock.lockRegisterLog.RUnlock()
	return calls
}

// RegisterMiddleware calls RegisterMiddlewareFunc.
func (mock *ContainerMock) RegisterMiddleware(name string, middleware rest.Middleware) {
	if mock.RegisterMiddlewareFunc == nil {
		panic("ContainerMock.RegisterMiddlewareFunc: method is nil but Container.RegisterMiddleware was just called")
	}
	callInfo := struct {
		Name       string
		Middleware rest.Middleware
	}{
		Name:       name,
		Middleware: middleware,
	}
	mock.lockRegisterMiddleware.Lock()
	mock.calls.RegisterMiddleware = append(mock.calls.RegisterMiddleware, callInfo)
	mock.lockRegisterMiddleware.Unlock()
	mock.RegisterMiddlewareFunc(name, middleware)
}

// RegisterMiddlewareCalls gets all the calls that were made to RegisterMiddleware.
// Check the length with:
//     len(mockedContainer.RegisterMiddlewareCalls())
func (mock *ContainerMock) RegisterMiddlewareCalls() []struct {
	Name       string
	Middleware rest.Middleware
} {
	var calls []struct {
		Name       string
		Middleware rest.Middleware
	}
	mock.lockRegisterMiddleware.RLock()
	calls = mock.calls.RegisterMiddleware
	mock.lockRegisterMiddleware.RUnlock()
	return calls
}

// RegisterOperationInitializer calls RegisterOperationInitializerFunc.
func (mock *ContainerMock) RegisterOperationInitializer(initializer rest.OperationInitializer) {
	if mock.RegisterOperationInitializerFunc == nil {
		panic("ContainerMock.RegisterOperationInitializerFunc: method is nil but Container.RegisterOperationInitializer was just called")
	}
	callInfo := struct {
		Initializer rest.OperationInitializer
	}{
		Initializer: initializer,
	}
	mock.lockRegisterOperationInitializer.Lock()
	mock.calls.RegisterOperationInitializer = append(mock.calls.RegisterOperationInitializer, callInfo)
	mock.lockRegisterOperationInitializer.Unlock()
	mock.RegisterOperationInitializerFunc(initializer)
}

// RegisterOperationInitializerCalls gets all the calls that were made to RegisterOperationInitializer.
// Check the length with:
//     len(mockedContainer.RegisterOperationInitializerCalls())
func (mock *ContainerMock) RegisterOperationInitializerCalls() []struct {
	Initializer rest.OperationInitializer
} {
	var calls []struct {
		Initializer rest.OperationInitializer
	}
	mock.lockRegisterOperationInitializer.RLock()
	calls = mock.calls.RegisterOperationInitializer
	mock.lockRegisterOperationInitializer.RUnlock()
	return calls
}

// RegisterPermissionEnforcer calls RegisterPermissionEnforcerFunc.
func (mock *ContainerMock) RegisterPermissionEnforcer(name string, enforcer *casbin.Enforcer) {
	if mock.RegisterPermissionEnforcerFunc == nil {
		panic("ContainerMock.RegisterPermissionEnforcerFunc: method is nil but Container.RegisterPermissionEnforcer was just called")
	}
	callInfo := struct {
		Name     string
		Enforcer *casbin.Enforcer
	}{
		Name:     name,
		Enforcer: enforcer,
	}
	mock.lockRegisterPermissionEnforcer.Lock()
	mock.calls.RegisterPermissionEnforcer = append(mock.calls.RegisterPermissionEnforcer, callInfo)
	mock.lockRegisterPermissionEnforcer.Unlock()
	mock.RegisterPermissionEnforcerFunc(name, enforcer)
}

// RegisterPermissionEnforcerCalls gets all the calls that were made to RegisterPermissionEnforcer.
// Check the length with:
//     len(mockedContainer.RegisterPermissionEnforcerCalls())
func (mock *ContainerMock) RegisterPermissionEnforcerCalls() []struct {
	Name     string
	Enforcer *casbin.Enforcer
} {
	var calls []struct {
		Name     string
		Enforcer *casbin.Enforcer
	}
	mock.lockRegisterPermissionEnforcer.RLock()
	calls = mock.calls.RegisterPermissionEnforcer
	mock.lockRegisterPermissionEnforcer.RUnlock()
	return calls
}

// RegisterPostPathInitializer calls RegisterPostPathInitializerFunc.
func (mock *ContainerMock) RegisterPostPathInitializer(initializer rest.PathInitializer) {
	if mock.RegisterPostPathInitializerFunc == nil {
		panic("ContainerMock.RegisterPostPathInitializerFunc: method is nil but Container.RegisterPostPathInitializer was just called")
	}
	callInfo := struct {
		Initializer rest.PathInitializer
	}{
		Initializer: initializer,
	}
	mock.lockRegisterPostPathInitializer.Lock()
	mock.calls.RegisterPostPathInitializer = append(mock.calls.RegisterPostPathInitializer, callInfo)
	mock.lockRegisterPostPathInitializer.Unlock()
	mock.RegisterPostPathInitializerFunc(initializer)
}

// RegisterPostPathInitializerCalls gets all the calls that were made to RegisterPostPathInitializer.
// Check the length with:
//     len(mockedContainer.RegisterPostPathInitializerCalls())
func (mock *ContainerMock) RegisterPostPathInitializerCalls() []struct {
	Initializer rest.PathInitializer
} {
	var calls []struct {
		Initializer rest.PathInitializer
	}
	mock.lockRegisterPostPathInitializer.RLock()
	calls = mock.calls.RegisterPostPathInitializer
	mock.lockRegisterPostPathInitializer.RUnlock()
	return calls
}

// RegisterPrePathInitializer calls RegisterPrePathInitializerFunc.
func (mock *ContainerMock) RegisterPrePathInitializer(initializer rest.PathInitializer) {
	if mock.RegisterPrePathInitializerFunc == nil {
		panic("ContainerMock.RegisterPrePathInitializerFunc: method is nil but Container.RegisterPrePathInitializer was just called")
	}
	callInfo := struct {
		Initializer rest.PathInitializer
	}{
		Initializer: initializer,
	}
	mock.lockRegisterPrePathInitializer.Lock()
	mock.calls.RegisterPrePathInitializer = append(mock.calls.RegisterPrePathInitializer, callInfo)
	mock.lockRegisterPrePathInitializer.Unlock()
	mock.RegisterPrePathInitializerFunc(initializer)
}

// RegisterPrePathInitializerCalls gets all the calls that were made to RegisterPrePathInitializer.
// Check the length with:
//     len(mockedContainer.RegisterPrePathInitializerCalls())
func (mock *ContainerMock) RegisterPrePathInitializerCalls() []struct {
	Initializer rest.PathInitializer
} {
	var calls []struct {
		Initializer rest.PathInitializer
	}
	mock.lockRegisterPrePathInitializer.RLock()
	calls = mock.calls.RegisterPrePathInitializer
	mock.lockRegisterPrePathInitializer.RUnlock()
	return calls
}

// RegisterProjection calls RegisterProjectionFunc.
func (mock *ContainerMock) RegisterProjection(name string, projection weos.Projection) {
	if mock.RegisterProjectionFunc == nil {
		panic("ContainerMock.RegisterProjectionFunc: method is nil but Container.RegisterProjection was just called")
	}
	callInfo := struct {
		Name       string
		Projection weos.Projection
	}{
		Name:       name,
		Projection: projection,
	}
	mock.lockRegisterProjection.Lock()
	mock.calls.RegisterProjection = append(mock.calls.RegisterProjection, callInfo)
	mock.lockRegisterProjection.Unlock()
	mock.RegisterProjectionFunc(name, projection)
}

// RegisterProjectionCalls gets all the calls that were made to RegisterProjection.
// Check the length with:
//     len(mockedContainer.RegisterProjectionCalls())
func (mock *ContainerMock) RegisterProjectionCalls() []struct {
	Name       string
	Projection weos.Projection
} {
	var calls []struct {
		Name       string
		Projection weos.Projection
	}
	mock.lockRegisterProjection.RLock()
	calls = mock.calls.RegisterProjection
	mock.lockRegisterProjection.RUnlock()
	return calls
}

// RegisterSecurityConfiguration calls RegisterSecurityConfigurationFunc.
func (mock *ContainerMock) RegisterSecurityConfiguration(configuration *rest.SecurityConfiguration) {
	if mock.RegisterSecurityConfigurationFunc == nil {
		panic("ContainerMock.RegisterSecurityConfigurationFunc: method is nil but Container.RegisterSecurityConfiguration was just called")
	}
	callInfo := struct {
		Configuration *rest.SecurityConfiguration
	}{
		Configuration: configuration,
	}
	mock.lockRegisterSecurityConfiguration.Lock()
	mock.calls.RegisterSecurityConfiguration = append(mock.calls.RegisterSecurityConfiguration, callInfo)
	mock.lockRegisterSecurityConfiguration.Unlock()
	mock.RegisterSecurityConfigurationFunc(configuration)
}

// RegisterSecurityConfigurationCalls gets all the calls that were made to RegisterSecurityConfiguration.
// Check the length with:
//     len(mockedContainer.RegisterSecurityConfigurationCalls())
func (mock *ContainerMock) RegisterSecurityConfigurationCalls() []struct {
	Configuration *rest.SecurityConfiguration
} {
	var calls []struct {
		Configuration *rest.SecurityConfiguration
	}
	mock.lockRegisterSecurityConfiguration.RLock()
	calls = mock.calls.RegisterSecurityConfiguration
	mock.lockRegisterSecurityConfiguration.RUnlock()
	return calls
}

// Ensure, that ValidatorMock does implement rest.Validator.
// If this is not the case, regenerate this file with moq.
var _ rest.Validator = &ValidatorMock{}

// ValidatorMock is a mock implementation of rest.Validator.
//
// 	func TestSomethingThatUsesValidator(t *testing.T) {
//
// 		// make and configure a mocked rest.Validator
// 		mockedValidator := &ValidatorMock{
// 			FromSchemaFunc: func(scheme *openapi3.SecurityScheme) (rest.Validator, error) {
// 				panic("mock out the FromSchema method")
// 			},
// 			ValidateFunc: func(ctxt echo.Context) (bool, interface{}, string, string, string, string, error) {
// 				panic("mock out the Validate method")
// 			},
// 		}
//
// 		// use mockedValidator in code that requires rest.Validator
// 		// and then make assertions.
//
// 	}
type ValidatorMock struct {
	// FromSchemaFunc mocks the FromSchema method.
	FromSchemaFunc func(scheme *openapi3.SecurityScheme) (rest.Validator, error)

	// ValidateFunc mocks the Validate method.
	ValidateFunc func(ctxt echo.Context) (bool, interface{}, string, string, string, string, error)

	// calls tracks calls to the methods.
	calls struct {
		// FromSchema holds details about calls to the FromSchema method.
		FromSchema []struct {
			// Scheme is the scheme argument value.
			Scheme *openapi3.SecurityScheme
		}
		// Validate holds details about calls to the Validate method.
		Validate []struct {
			// Ctxt is the ctxt argument value.
			Ctxt echo.Context
		}
	}
	lockFromSchema sync.RWMutex
	lockValidate   sync.RWMutex
}

// FromSchema calls FromSchemaFunc.
func (mock *ValidatorMock) FromSchema(scheme *openapi3.SecurityScheme) (rest.Validator, error) {
	if mock.FromSchemaFunc == nil {
		panic("ValidatorMock.FromSchemaFunc: method is nil but Validator.FromSchema was just called")
	}
	callInfo := struct {
		Scheme *openapi3.SecurityScheme
	}{
		Scheme: scheme,
	}
	mock.lockFromSchema.Lock()
	mock.calls.FromSchema = append(mock.calls.FromSchema, callInfo)
	mock.lockFromSchema.Unlock()
	return mock.FromSchemaFunc(scheme)
}

// FromSchemaCalls gets all the calls that were made to FromSchema.
// Check the length with:
//     len(mockedValidator.FromSchemaCalls())
func (mock *ValidatorMock) FromSchemaCalls() []struct {
	Scheme *openapi3.SecurityScheme
} {
	var calls []struct {
		Scheme *openapi3.SecurityScheme
	}
	mock.lockFromSchema.RLock()
	calls = mock.calls.FromSchema
	mock.lockFromSchema.RUnlock()
	return calls
}

// Validate calls ValidateFunc.
func (mock *ValidatorMock) Validate(ctxt echo.Context) (bool, interface{}, string, string, string, string, error) {
	if mock.ValidateFunc == nil {
		panic("ValidatorMock.ValidateFunc: method is nil but Validator.Validate was just called")
	}
	callInfo := struct {
		Ctxt echo.Context
	}{
		Ctxt: ctxt,
	}
	mock.lockValidate.Lock()
	mock.calls.Validate = append(mock.calls.Validate, callInfo)
	mock.lockValidate.Unlock()
	return mock.ValidateFunc(ctxt)
}

// ValidateCalls gets all the calls that were made to Validate.
// Check the length with:
//     len(mockedValidator.ValidateCalls())
func (mock *ValidatorMock) ValidateCalls() []struct {
	Ctxt echo.Context
} {
	var calls []struct {
		Ctxt echo.Context
	}
	mock.lockValidate.RLock()
	calls = mock.calls.Validate
	mock.lockValidate.RUnlock()
	return calls
}
