openapi: 3.0.3
info:
  title: Wepala FHIR
  description: Fast Healthcare Interoperability Resources (FHIR) API.
  version: 1.0.0
servers:
  - url: 'https://prod1.weos.sh/fhir'
x-weos-config:
  basePath:
  database:
    driver: sqlite3
    database: test.db
components:
  schemas:
    Address:
      x-inline: true
      type: object
      properties:
        use:
          type: string
          enum:
            - home
            - work
            - temp
            - old
            - billing
        type:
          type: string
          enum:
            - postal
            - physical
            - both
        text:
          type: string
          nullable: true
          description: Text representation of the address
        line:
          type: array
          items:
            type: string
          nullable: true
          description: Street name, number, direction & P.O. Box etc.
        city:
          type: string
          nullable: true
          description: Name of city, town etc.
        district:
          type: string
          nullable: true
          description: District name (aka county)
        state:
          type: string
          nullable: true
          description: Sub-unit of country (abbreviations ok)
        postalCode:
          type: string
          nullable: true
          description: Postal code for area
        country:
          type: string
          nullable: true
        period:
          $ref: "#/components/schemas/Period"
    Appointment:
      type: object
      properties:
        #        identifier:
        #          type: array
        #          items:
        #            $ref: "#/components/schemas/Identifier"
        status:
          type: string
          nullable: true
          enum:
            - proposed
            - pending
            - booked
            - arrived
            - fulfilled
            - cancelled
            - noshow
            - entered-in-error
            - checked-in
            - waitlist
        #        cancelationReason:
        #          $ref: "#/components/schemas/CodeableConcept"
        #        serviceCategory:
        #          type: array
        #          nullable: true
        #          items:
        #            $ref: "#/components/schemas/CodeableConcept"
        #          description: A broad categorization of the service that is to be performed during this appointment
        #        serviceType:
        #          type: array
        #          nullable: true
        #          items:
        #            $ref: "#/components/schemas/CodeableConcept"
        #        speciality:
        #          type: array
        #          nullable: true
        #          items:
        #            $ref: "#/components/schemas/CodeableConcept"
        #        appointmentType:
        #          $ref: "#/components/schemas/CodeableConcept"
        #        reasonCode:
        #          type: array
        #          nullable: true
        #          items:
        #            $ref: "#/components/schemas/CodeableConcept"
        #        reasonReference:
        #          type: array
        #          nullable: true
        #          items:
        #            $ref: "#/components/schemas/Procedure"
        priority:
          type: integer
          nullable: true
        description:
          type: string
          nullable: true
        supportInformation:
          type: string
          nullable: true
        start:
          type: string
          format: date-time
          nullable: true
        end:
          type: string
          format: date-time
          nullable: true
        minutesDuration:
          type: integer
          nullable: true
        #        slot:
        #          type: array
        #          nullable: true
        #          items:
        #            $ref: "#/components/schemas/Slot"
        created:
          type: string
          format: date-time
          nullable: true
        comment:
          type: string
          nullable: true
        patientInstruction:
          type: string
          nullable: true
        #        basedOn:
        #          type: array
        #          nullable: true
        #          items:
        #            $ref: "#/components/schemas/ServiceRequest"
        participant:
          type: array
          items:
            type: object
            properties:
              type:
                type: array
                nullable: true
                items:
                  $ref: "#/components/schemas/CodeableConcept"
              actor:
                $ref: "#/components/schemas/Patient"
              required:
                type: string
                nullable: true
              status:
                type: string
              period:
                $ref: "#/components/schemas/Period"
    AllergyIntolerance:
      type: object
      properties:
        type:
          type: string
        clinicalStatus:
          $ref: "#/components/schemas/CodeableConcept"
        verificationStatus:
          $ref: "#/components/schemas/CodeableConcept"
        category:
          type: array
          items:
            type: string
            enum:
              - food
              - medication
              - environment
              - biologic
        criticality:
          type: string
          enum:
            - low
            - high
            - unable-to-access
        code:
          $ref: "#/components/schemas/CodeableConcept"
        patient:
          $ref: "#/components/schemas/Patient"

    Bundle:
      type: object
      properties:
        id:
          type: string
          format: ksuid
          nullable: true
        type:
          type: string
        entry:
          type: array
          items:
            type: object
            properties:
              link:
                type: array
                items:
                  type: string
              fullUrl:
                type: string
                format: uri
              search:
                type: object
                properties:
                  mode:
                    type: string
                  score:
                    type: string

    Procedure:
      type: object
      properties:
        identifier:
          type: array
          items:
            $ref: "#/components/schemas/Identifier"

    Attachment:
      type: object
      properties:
        contentType:
          type: string
        language:
          type: string
          nullable: true
        data:
          type: string
          nullable: true
        url:
          type: string
          format: url
          description: Uri where the data can be found
      required:
        - contentType
    CodeableConcept:
      x-inline: true
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            format: ksuid
          coding:
            type: array
            nullable: true
            items:
              $ref: "#/components/schemas/Coding"
          text:
            type: string
            nullable: true
      example:
        coding:
          - system: test
      x-identifiers:
        - id
    Coding:
      type: object
      properties:
        system:
          type: string
          format: uri
          nullable: true
          description: Identity of the terminology system
        version:
          type: string
          nullable: true
          description: Version of the system - if relevant
        code:
          type: string
          description: Symbol in syntax defined by the system
          nullable: true
        display:
          type: string
          description: Representation defined by the system
          nullable: true
        userSelected:
          type: boolean
          description: If this coding was chosen directly by the user
          nullable: true
    ContactPoint:
      x-inline: true
      type: object
      properties:
        system:
          type: string
          enum:
            - phone
            - fax
            - email
            - pager
            - url
            - sms
            - other
        value:
          type: string
          nullable: true
        use:
          type: string
          enum:
            - home
            - work
            - temp
            - old
            - mobile
        rank:
          type: integer
          format: uint
          nullable: true
        period:
          $ref: "#/components/schemas/Period"
      required:
        - system
        - use
    Encounter:
      type: object
      properties:
        #        identifier:
        #          type: array
        #          items:
        #            $ref: "#/components/schemas/Identifier"
        status:
          type: string
          nullable: true
          enum:
            - in-progress
            - planned
            - onhold
            - completed
            - cancelled
            - entered-in-error
            - unkown
        #TODO this is supposed to be `subject` not `patient`. change when https://wepala.atlassian.net/browse/WEOS-1527 is fixed
        patient:
          $ref: "#/components/schemas/Patient"
        appointment:
          $ref: "#/components/schemas/Appointment"
        period:
          $ref: "#/components/schemas/Period"
    HumanName:
      x-inline: true
      type: object
      properties:
        use:
          type: string
          enum:
            - usual
            - official
            - temp
            - nickname
            - anonymous
            - old
            - maiden
        text:
          type: string
          nullable: true
        family:
          type: string
          nullable: true
        given:
          type: string
          nullable: true
        prefix:
          type: string
          nullable: true
        suffix:
          type: string
          nullable: true
        period:
          $ref: "#/components/schemas/Period"
      required:
        - use
    Identifier:
      x-inline: true
      type: object
      properties:
        use:
          type: string
          enum:
            - usual
            - official
            - temp
            - secondary
            - old
        type:
          $ref: "#/components/schemas/CodeableConcept"
        system:
          type: string
          format: uri
          description: |
            The system is a URI that defines a set of identifiers (i.e. how the value is made unique). It might be a 
            specific application or a recognized standard/specification for a set of identifiers or a way of making
            identifiers unique.
            
            It is up to the implementer organization to determine an appropriate URL or URN structure that will avoid
            collisions and to manage that space (and the resolvability of URLs) over time.

            Note that the scope of a given identifier system may extend beyond identifiers that might be captured by a
            single resource. For example, some systems might draw all "order" identifiers from a single namespace,
            though some might be used on MedicationRequest while others would appear on ServiceRequest.

            If the identifier value itself is naturally a globally unique URI (e.g. an OID, a UUID, or a URI with no
            trailing local part), then the system SHALL be "urn:ietf:rfc:3986", and the URI is in the value (OIDs and
            UUIDs using urn:oid: and urn:uuid:
            
            Naturally globally unique identifiers are those for which no system has been assigned and where the value of the identifier is reasonably expected to not be re-used. Typically, these are absolute URIs of some kind.

            In some cases, the system might not be known - only the value is known (e.g. a simple device that scans a
            barcode), or the system is known implicitly (simple exchange in a limited context, often driven by barcode
            readers). In this case, no useful matching may be performed using the value unless the system can be safely
            inferred by the context. Applications should provide a system wherever possible, as information sharing in a
            wider context is very likely to arise eventually, and values without a system are inherently limited in use.
        value:
          type: string
          nullable: true
        period:
          $ref: "#/components/schemas/Period"
        assigner:
          $ref: "#/components/schemas/Organization"
      required:
        - use
    Organization:
      type: object
    Period:
      type: object
      properties:
        start:
          type: string
          format: date-time
          nullable: true
        end:
          type: string
          format: date-time
          nullable: true
    Patient:
      type: object
      properties:
        identifier:
          type: array
          items:
            $ref: "#/components/schemas/Identifier"
        name:
          type: array
          items:
            $ref: "#/components/schemas/HumanName"
          nullable: true
        active:
          type: boolean
        telecom:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/ContactPoint"
        gender:
          type: string
          nullable: true
          enum:
            - male
            - female
            - other
            - unknown
        birthDate:
          type: string
          format: date-time
          nullable: true
        deceased:
          type: boolean
          additionalProperties:
            type: string
          nullable: true
        address:
          type: array
          items:
            $ref: "#/components/schemas/Address"
          nullable: true
        maritalStatus:
          $ref: "#/components/schemas/CodeableConcept"
        multipleBirth:
          type: boolean
          nullable: true
          additionalProperties:
            type: integer
        photo:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/Attachment"
        contact:
          type: array
          nullable: true
          items:
            type: object
            properties:
              relationship:
                $ref: "#/components/schemas/CodeableConcept"
              name:
                type: string
                nullable: true
              telecom:
                type: array
                items:
                  $ref: "#/components/schemas/ContactPoint"
              address:
                $ref: "#/components/schemas/Address"
              gender:
                type: string
              organization:
                $ref: "#/components/schemas/Organization"
              period:
                $ref: "#/components/schemas/Period"
        communication:
          type: array
          items:
            type: object
            properties:
              language:
                $ref: "#/components/schemas/CodeableConcept"
              preferred:
                type: boolean
          description: A language which may be used to communicate with the patient about his or her health
          nullable: true
        generalPractitioner:
          type: array
          items:
            $ref: "#/components/schemas/Organization"
          nullable: true
        managingOrganization:
          $ref: "#/components/schemas/Organization"
    Questionnaire:
      type: object
      properties:
        identifier:
          type: array
          items:
            $ref: "#/components/schemas/Identifier"
          nullable: true
        name:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: string
        subjectType:
          type: array
          items:
            type: string
      required:
        - subjectType
        - status
    Slot:
      type: object
      properties:
        identifier:
          type: array
          items:
            $ref: "#/components/schemas/Identifier"
          nullable: true
        serviceCategory:
          type: array
          items:
            $ref: "#/components/schemas/CodeableConcept"
          nullable: true
        serviceType:
          type: array
          items:
            $ref: "#/components/schemas/CodeableConcept"
          nullable: true
        specialty:
          type: array
          items:
            $ref: "#/components/schemas/CodeableConcept"
          nullable: true
        appointmentType:
          $ref: "#/components/schemas/CodeableConcept"
        schedule:
          $ref: "#/components/schemas/CodeableConcept"
        status:
          type: string
        start:
          type: string
          format: date-time
          nullable: true
        end:
          type: string
          format: date-time
          nullable: true
        overbooked:
          type: boolean
          nullable: true
        comment:
          type: string
          nullable: true
      required:
        - status
    ServiceRequest:
      type: object
      properties:
        status:
          type: string
          nullable: true
          enum:
            - draft
            - active
            - on-hold
            - revoked
            - completed
            - entered-in-error
        intent:
          type: string
          nullable: true
          enum:
            - proposal
            - plan
            - directive
            - order
            - original-order
            - reflex-order
            - filler-order
            - instance-order
            - option
        priority:
          type: string
          nullable: true
          enum:
            - routine
            - urgent
            - asap
            - stat
        category:
          type: array
          items:
            $ref: "#/components/schemas/CodeableConcept"
        subject:
          $ref: "#/components/schemas/Patient"
        encounter:
          $ref: "#/components/schemas/Encounter"
        code:
          $ref: "#/components/schemas/CodeableConcept"




paths:
  /health:
    get:
      responses:
        200:
          description: Health Endpoint
          content:
            text/html:
              example: |
                <html><body>Health</body></html>

  /api:
    get:
      operationId: Get API Details
      x-controller: APIDiscovery
      responses:
        200:
          description: API Details
          content:
            application/json:
              schema:
                type: string
  /Patient:
    post:
      operationId: Create Patient
      summary: Create a patient
      requestBody:
        description: Patient info that is submitted
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Patient"
      responses:
        201:
          description: Patient Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"
        400:
          description: Invalid Information

    get:
      operationId: Get Patients
      summary: Get List of Patients
      x-schema: "#/components/schemas/Patient"
      responses:
        200:
          description: List of Patients
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Patient"


  /patient/{id}:
    get:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      summary: Get Patient by id
      operationId: Get patient
      responses:
        200:
          description: Get Patient Information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"

    put:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      summary: Update patient information
      operationId: Update patient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Patient"
      responses:
        200:
          description: Update Patient Information
        400:
          description: Bad Request
        401:
          description: User is not authenticated
        403:
          description: User is authenticated but is not authorized to access this information

    delete:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: patient
      summary: Delete Patient
      operationId: Delete Patient
      responses:
        200:
          description: Patient Deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"
        400:
          description: Invalid Patient Submitted

  /appointment:
    post:
      operationId: Create Appointment
      summary: Create an Appointment
      requestBody:
        description: Appointment info that is submitted
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Appointment"
      responses:
        201:
          description: Appointment Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Appointment"
        400:
          description: Invalid Information

    get:
      operationId: Get Appointments
      summary: Get List of Appointments
      parameters:
        - in: query
          name: _filters
          style: deepObject
          explode: true
          schema:
            type: object
            properties:
              field:
                type: string
              operator:
                type: string
              value:
                type: string
              values:
                type: array
                items:
                  type: string
        - in: query
          name: status
          schema:
            type: string
        - in: query
          name: start
          schema:
            type: string
      x-schema: "#/components/schemas/Appointment"
      responses:
        200:
          description: List of Appointments
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Bundle"

  /appointment/{id}:
    get:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      summary: Get appointment by id
      operationId: Get appointment
      responses:
        200:
          description: Get Appointment Information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Appointment"

    put:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      summary: Update appointment information
      operationId: Update appointment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Appointment"
      responses:
        200:
          description: Update Appointment Information
        400:
          description: Bad Request
        401:
          description: User is not authenticated
        403:
          description: User is authenticated but is not authorized to access this information

    delete:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Appointment
      summary: Delete Appointment
      operationId: Delete Appointment
      x-schema: "#/components/schemas/Appointment"
      responses:
        200:
          description: Appointment Deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Appointment"
        400:
          description: Invalid Appointment Submitted

  /encounter:
    post:
      operationId: Create Encounter
      summary: Create an Encounter
      requestBody:
        description: Encounter info that is submitted
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Encounter"
      responses:
        201:
          description: Encounter Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Encounter"
        400:
          description: Invalid Information

    get:
      operationId: Get Encounters
      summary: Get List of Encounters
      parameters:
        - in: query
          name: _filters
          style: deepObject
          explode: true
          schema:
            type: object
            properties:
              field:
                type: string
              operator:
                type: string
              value:
                type: string
              values:
                type: array
                items:
                  type: string
        - in: query
          name: status
          schema:
            type: string
        - in: query
          name: start
          schema:
            type: string
      x-schema: "#/components/schemas/Encounter"
      responses:
        200:
          description: List of Encounters
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Bundle"

  /encounter/{id}:
    get:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      summary: Get encounter by id
      operationId: Get encounter
      responses:
        200:
          description: Get Encounter Information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Encounter"

    put:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      summary: Update encounter information
      operationId: Update encounter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Encounter"
      responses:
        200:
          description: Update Encounter Information
        400:
          description: Bad Request
        401:
          description: User is not authenticated
        403:
          description: User is authenticated but is not authorized to access this information

    delete:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Encounter
      summary: Delete Encounter
      operationId: Delete Encounter
      x-schema: "#/components/schemas/Encounter"
      responses:
        200:
          description: Encounter Deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Encounter"
        400:
          description: Invalid Encounter Submitted