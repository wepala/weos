// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package projections_test

import (
	"context"
	ds "github.com/ompluscator/dynamic-struct"
	weos "github.com/wepala/weos/model"
	"github.com/wepala/weos/projections"
	"sync"
)

// Ensure, that ProjectionMock does implement projections.Projection.
// If this is not the case, regenerate this file with moq.
var _ projections.Projection = &ProjectionMock{}

// ProjectionMock is a mock implementation of projections.Projection.
//
// 	func TestSomethingThatUsesProjection(t *testing.T) {
//
// 		// make and configure a mocked projections.Projection
// 		mockedProjection := &ProjectionMock{
// 			GetByEntityIDFunc: func(ctxt context.Context, entityFactory weos.EntityFactory, id string) (map[string]interface{}, error) {
// 				panic("mock out the GetByEntityID method")
// 			},
// 			GetByKeyFunc: func(ctxt context.Context, entityFactory weos.EntityFactory, identifiers map[string]interface{}) (map[string]interface{}, error) {
// 				panic("mock out the GetByKey method")
// 			},
// 			GetByPropertiesFunc: func(ctxt context.Context, entityFactory weos.EntityFactory, identifiers map[string]interface{}) ([]map[string]interface{}, error) {
// 				panic("mock out the GetByProperties method")
// 			},
// 			GetContentEntitiesFunc: func(ctx context.Context, entityFactory weos.EntityFactory, page int, limit int, query string, sortOptions map[string]string, filterOptions map[string]interface{}) ([]map[string]interface{}, int64, error) {
// 				panic("mock out the GetContentEntities method")
// 			},
// 			GetContentEntityFunc: func(ctx context.Context, entityFactory weos.EntityFactory, weosID string) (*weos.ContentEntity, error) {
// 				panic("mock out the GetContentEntity method")
// 			},
// 			GetEventHandlerFunc: func() weos.EventHandler {
// 				panic("mock out the GetEventHandler method")
// 			},
// 			MigrateFunc: func(ctx context.Context, builders map[string]ds.Builder, deletedFields map[string][]string) error {
// 				panic("mock out the Migrate method")
// 			},
// 		}
//
// 		// use mockedProjection in code that requires projections.Projection
// 		// and then make assertions.
//
// 	}
type ProjectionMock struct {
	// GetByEntityIDFunc mocks the GetByEntityID method.
	GetByEntityIDFunc func(ctxt context.Context, entityFactory weos.EntityFactory, id string) (map[string]interface{}, error)

	// GetByKeyFunc mocks the GetByKey method.
	GetByKeyFunc func(ctxt context.Context, entityFactory weos.EntityFactory, identifiers map[string]interface{}) (map[string]interface{}, error)

	// GetByPropertiesFunc mocks the GetByProperties method.
	GetByPropertiesFunc func(ctxt context.Context, entityFactory weos.EntityFactory, identifiers map[string]interface{}) ([]map[string]interface{}, error)

	// GetContentEntitiesFunc mocks the GetContentEntities method.
	GetContentEntitiesFunc func(ctx context.Context, entityFactory weos.EntityFactory, page int, limit int, query string, sortOptions map[string]string, filterOptions map[string]interface{}) ([]map[string]interface{}, int64, error)

	// GetContentEntityFunc mocks the GetContentEntity method.
	GetContentEntityFunc func(ctx context.Context, entityFactory weos.EntityFactory, weosID string) (*weos.ContentEntity, error)

	// GetEventHandlerFunc mocks the GetEventHandler method.
	GetEventHandlerFunc func() weos.EventHandler

	// MigrateFunc mocks the Migrate method.
	MigrateFunc func(ctx context.Context, builders map[string]ds.Builder, deletedFields map[string][]string) error

	// calls tracks calls to the methods.
	calls struct {
		// GetByEntityID holds details about calls to the GetByEntityID method.
		GetByEntityID []struct {
			// Ctxt is the ctxt argument value.
			Ctxt context.Context
			// EntityFactory is the entityFactory argument value.
			EntityFactory weos.EntityFactory
			// ID is the id argument value.
			ID string
		}
		// GetByKey holds details about calls to the GetByKey method.
		GetByKey []struct {
			// Ctxt is the ctxt argument value.
			Ctxt context.Context
			// EntityFactory is the entityFactory argument value.
			EntityFactory weos.EntityFactory
			// Identifiers is the identifiers argument value.
			Identifiers map[string]interface{}
		}
		// GetByProperties holds details about calls to the GetByProperties method.
		GetByProperties []struct {
			// Ctxt is the ctxt argument value.
			Ctxt context.Context
			// EntityFactory is the entityFactory argument value.
			EntityFactory weos.EntityFactory
			// Identifiers is the identifiers argument value.
			Identifiers map[string]interface{}
		}
		// GetContentEntities holds details about calls to the GetContentEntities method.
		GetContentEntities []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EntityFactory is the entityFactory argument value.
			EntityFactory weos.EntityFactory
			// Page is the page argument value.
			Page int
			// Limit is the limit argument value.
			Limit int
			// Query is the query argument value.
			Query string
			// SortOptions is the sortOptions argument value.
			SortOptions map[string]string
			// FilterOptions is the filterOptions argument value.
			FilterOptions map[string]interface{}
		}
		// GetContentEntity holds details about calls to the GetContentEntity method.
		GetContentEntity []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EntityFactory is the entityFactory argument value.
			EntityFactory weos.EntityFactory
			// WeosID is the weosID argument value.
			WeosID string
		}
		// GetEventHandler holds details about calls to the GetEventHandler method.
		GetEventHandler []struct {
		}
		// Migrate holds details about calls to the Migrate method.
		Migrate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Builders is the builders argument value.
			Builders map[string]ds.Builder
			// DeletedFields is the deletedFields argument value.
			DeletedFields map[string][]string
		}
	}
	lockGetByEntityID      sync.RWMutex
	lockGetByKey           sync.RWMutex
	lockGetByProperties    sync.RWMutex
	lockGetContentEntities sync.RWMutex
	lockGetContentEntity   sync.RWMutex
	lockGetEventHandler    sync.RWMutex
	lockMigrate            sync.RWMutex
}

// GetByEntityID calls GetByEntityIDFunc.
func (mock *ProjectionMock) GetByEntityID(ctxt context.Context, entityFactory weos.EntityFactory, id string) (map[string]interface{}, error) {
	if mock.GetByEntityIDFunc == nil {
		panic("ProjectionMock.GetByEntityIDFunc: method is nil but Projection.GetByEntityID was just called")
	}
	callInfo := struct {
		Ctxt          context.Context
		EntityFactory weos.EntityFactory
		ID            string
	}{
		Ctxt:          ctxt,
		EntityFactory: entityFactory,
		ID:            id,
	}
	mock.lockGetByEntityID.Lock()
	mock.calls.GetByEntityID = append(mock.calls.GetByEntityID, callInfo)
	mock.lockGetByEntityID.Unlock()
	return mock.GetByEntityIDFunc(ctxt, entityFactory, id)
}

// GetByEntityIDCalls gets all the calls that were made to GetByEntityID.
// Check the length with:
//     len(mockedProjection.GetByEntityIDCalls())
func (mock *ProjectionMock) GetByEntityIDCalls() []struct {
	Ctxt          context.Context
	EntityFactory weos.EntityFactory
	ID            string
} {
	var calls []struct {
		Ctxt          context.Context
		EntityFactory weos.EntityFactory
		ID            string
	}
	mock.lockGetByEntityID.RLock()
	calls = mock.calls.GetByEntityID
	mock.lockGetByEntityID.RUnlock()
	return calls
}

// GetByKey calls GetByKeyFunc.
func (mock *ProjectionMock) GetByKey(ctxt context.Context, entityFactory weos.EntityFactory, identifiers map[string]interface{}) (map[string]interface{}, error) {
	if mock.GetByKeyFunc == nil {
		panic("ProjectionMock.GetByKeyFunc: method is nil but Projection.GetByKey was just called")
	}
	callInfo := struct {
		Ctxt          context.Context
		EntityFactory weos.EntityFactory
		Identifiers   map[string]interface{}
	}{
		Ctxt:          ctxt,
		EntityFactory: entityFactory,
		Identifiers:   identifiers,
	}
	mock.lockGetByKey.Lock()
	mock.calls.GetByKey = append(mock.calls.GetByKey, callInfo)
	mock.lockGetByKey.Unlock()
	return mock.GetByKeyFunc(ctxt, entityFactory, identifiers)
}

// GetByKeyCalls gets all the calls that were made to GetByKey.
// Check the length with:
//     len(mockedProjection.GetByKeyCalls())
func (mock *ProjectionMock) GetByKeyCalls() []struct {
	Ctxt          context.Context
	EntityFactory weos.EntityFactory
	Identifiers   map[string]interface{}
} {
	var calls []struct {
		Ctxt          context.Context
		EntityFactory weos.EntityFactory
		Identifiers   map[string]interface{}
	}
	mock.lockGetByKey.RLock()
	calls = mock.calls.GetByKey
	mock.lockGetByKey.RUnlock()
	return calls
}

// GetByProperties calls GetByPropertiesFunc.
func (mock *ProjectionMock) GetByProperties(ctxt context.Context, entityFactory weos.EntityFactory, identifiers map[string]interface{}) ([]map[string]interface{}, error) {
	if mock.GetByPropertiesFunc == nil {
		panic("ProjectionMock.GetByPropertiesFunc: method is nil but Projection.GetByProperties was just called")
	}
	callInfo := struct {
		Ctxt          context.Context
		EntityFactory weos.EntityFactory
		Identifiers   map[string]interface{}
	}{
		Ctxt:          ctxt,
		EntityFactory: entityFactory,
		Identifiers:   identifiers,
	}
	mock.lockGetByProperties.Lock()
	mock.calls.GetByProperties = append(mock.calls.GetByProperties, callInfo)
	mock.lockGetByProperties.Unlock()
	return mock.GetByPropertiesFunc(ctxt, entityFactory, identifiers)
}

// GetByPropertiesCalls gets all the calls that were made to GetByProperties.
// Check the length with:
//     len(mockedProjection.GetByPropertiesCalls())
func (mock *ProjectionMock) GetByPropertiesCalls() []struct {
	Ctxt          context.Context
	EntityFactory weos.EntityFactory
	Identifiers   map[string]interface{}
} {
	var calls []struct {
		Ctxt          context.Context
		EntityFactory weos.EntityFactory
		Identifiers   map[string]interface{}
	}
	mock.lockGetByProperties.RLock()
	calls = mock.calls.GetByProperties
	mock.lockGetByProperties.RUnlock()
	return calls
}

// GetContentEntities calls GetContentEntitiesFunc.
func (mock *ProjectionMock) GetContentEntities(ctx context.Context, entityFactory weos.EntityFactory, page int, limit int, query string, sortOptions map[string]string, filterOptions map[string]interface{}) ([]map[string]interface{}, int64, error) {
	if mock.GetContentEntitiesFunc == nil {
		panic("ProjectionMock.GetContentEntitiesFunc: method is nil but Projection.GetContentEntities was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		EntityFactory weos.EntityFactory
		Page          int
		Limit         int
		Query         string
		SortOptions   map[string]string
		FilterOptions map[string]interface{}
	}{
		Ctx:           ctx,
		EntityFactory: entityFactory,
		Page:          page,
		Limit:         limit,
		Query:         query,
		SortOptions:   sortOptions,
		FilterOptions: filterOptions,
	}
	mock.lockGetContentEntities.Lock()
	mock.calls.GetContentEntities = append(mock.calls.GetContentEntities, callInfo)
	mock.lockGetContentEntities.Unlock()
	return mock.GetContentEntitiesFunc(ctx, entityFactory, page, limit, query, sortOptions, filterOptions)
}

// GetContentEntitiesCalls gets all the calls that were made to GetContentEntities.
// Check the length with:
//     len(mockedProjection.GetContentEntitiesCalls())
func (mock *ProjectionMock) GetContentEntitiesCalls() []struct {
	Ctx           context.Context
	EntityFactory weos.EntityFactory
	Page          int
	Limit         int
	Query         string
	SortOptions   map[string]string
	FilterOptions map[string]interface{}
} {
	var calls []struct {
		Ctx           context.Context
		EntityFactory weos.EntityFactory
		Page          int
		Limit         int
		Query         string
		SortOptions   map[string]string
		FilterOptions map[string]interface{}
	}
	mock.lockGetContentEntities.RLock()
	calls = mock.calls.GetContentEntities
	mock.lockGetContentEntities.RUnlock()
	return calls
}

// GetContentEntity calls GetContentEntityFunc.
func (mock *ProjectionMock) GetContentEntity(ctx context.Context, entityFactory weos.EntityFactory, weosID string) (*weos.ContentEntity, error) {
	if mock.GetContentEntityFunc == nil {
		panic("ProjectionMock.GetContentEntityFunc: method is nil but Projection.GetContentEntity was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		EntityFactory weos.EntityFactory
		WeosID        string
	}{
		Ctx:           ctx,
		EntityFactory: entityFactory,
		WeosID:        weosID,
	}
	mock.lockGetContentEntity.Lock()
	mock.calls.GetContentEntity = append(mock.calls.GetContentEntity, callInfo)
	mock.lockGetContentEntity.Unlock()
	return mock.GetContentEntityFunc(ctx, entityFactory, weosID)
}

// GetContentEntityCalls gets all the calls that were made to GetContentEntity.
// Check the length with:
//     len(mockedProjection.GetContentEntityCalls())
func (mock *ProjectionMock) GetContentEntityCalls() []struct {
	Ctx           context.Context
	EntityFactory weos.EntityFactory
	WeosID        string
} {
	var calls []struct {
		Ctx           context.Context
		EntityFactory weos.EntityFactory
		WeosID        string
	}
	mock.lockGetContentEntity.RLock()
	calls = mock.calls.GetContentEntity
	mock.lockGetContentEntity.RUnlock()
	return calls
}

// GetEventHandler calls GetEventHandlerFunc.
func (mock *ProjectionMock) GetEventHandler() weos.EventHandler {
	if mock.GetEventHandlerFunc == nil {
		panic("ProjectionMock.GetEventHandlerFunc: method is nil but Projection.GetEventHandler was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetEventHandler.Lock()
	mock.calls.GetEventHandler = append(mock.calls.GetEventHandler, callInfo)
	mock.lockGetEventHandler.Unlock()
	return mock.GetEventHandlerFunc()
}

// GetEventHandlerCalls gets all the calls that were made to GetEventHandler.
// Check the length with:
//     len(mockedProjection.GetEventHandlerCalls())
func (mock *ProjectionMock) GetEventHandlerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetEventHandler.RLock()
	calls = mock.calls.GetEventHandler
	mock.lockGetEventHandler.RUnlock()
	return calls
}

// Migrate calls MigrateFunc.
func (mock *ProjectionMock) Migrate(ctx context.Context, builders map[string]ds.Builder, deletedFields map[string][]string) error {
	if mock.MigrateFunc == nil {
		panic("ProjectionMock.MigrateFunc: method is nil but Projection.Migrate was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		Builders      map[string]ds.Builder
		DeletedFields map[string][]string
	}{
		Ctx:           ctx,
		Builders:      builders,
		DeletedFields: deletedFields,
	}
	mock.lockMigrate.Lock()
	mock.calls.Migrate = append(mock.calls.Migrate, callInfo)
	mock.lockMigrate.Unlock()
	return mock.MigrateFunc(ctx, builders, deletedFields)
}

// MigrateCalls gets all the calls that were made to Migrate.
// Check the length with:
//     len(mockedProjection.MigrateCalls())
func (mock *ProjectionMock) MigrateCalls() []struct {
	Ctx           context.Context
	Builders      map[string]ds.Builder
	DeletedFields map[string][]string
} {
	var calls []struct {
		Ctx           context.Context
		Builders      map[string]ds.Builder
		DeletedFields map[string][]string
	}
	mock.lockMigrate.RLock()
	calls = mock.calls.Migrate
	mock.lockMigrate.RUnlock()
	return calls
}
